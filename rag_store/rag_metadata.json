[
  {
    "file_name": "rag.py",
    "file_contents": "from sentence_transformers import SentenceTransformer\nimport faiss\nimport numpy as np\nimport fitz\nimport os, json\n\n\nclass FileRAG:\n    def __init__(self, model_name=\"all-MiniLM-L6-v2\", store_dir=\"rag_store\"):\n        self.model = SentenceTransformer(model_name)\n        self.index = None\n        self.metadata = []  # [{file_name, file_contents}]\n        self.store_dir = store_dir\n        os.makedirs(self.store_dir, exist_ok=True)\n\n        self._load_if_exists()\n\n\n    def pdf_to_text(self, pdf_path: str) -> str:\n        try:\n            doc = fitz.open(pdf_path)\n            text = \"\"\n            for page in doc:\n                text += page.get_text()\n            return text.strip()\n        except Exception as e:\n            print(f\"[WARN] PDF error: {pdf_path} ({e})\")\n            return \"\"\n\n\n    def build_index(self, file_dict: dict):\n        texts, file_names = [], []\n        self.metadata = []\n\n        for fname, content in file_dict.items():\n            try:\n                if fname.lower().endswith(\".pdf\"):\n                    text = self.pdf_to_text(content)\n                else:\n                    text = str(content)\n            except Exception as e:\n                print(f\"[WARN] {fname} fail: {e}\")\n                continue\n\n            if text.strip():\n                texts.append(text)\n                file_names.append(fname)\n                self.metadata.append({\n                    \"file_name\": fname,\n                    \"file_contents\": text\n                })\n\n        if not texts:\n            raise RuntimeError(\"there is no valid text to build index.\")\n\n        embeddings = self.model.encode(texts)\n        embeddings = np.array(embeddings).astype(\"float32\")\n\n        self.index = faiss.IndexFlatL2(embeddings.shape[1])\n        self.index.add(embeddings)\n\n        self._save_index()\n        self._save_metadata()\n\n        print(f\"[BUILD DONE] {len(texts)} files indexed.\")\n\n\n    def search(self, query, top_k=6):\n        if self.index is None:\n            raise RuntimeError(\"FAISS must be initialized before searching.\")\n\n        q_emb = self.model.encode([query]).astype(\"float32\")\n        scores, idxs = self.index.search(q_emb, top_k)\n\n        results = []\n        for i in idxs[0]:\n            if i < len(self.metadata):\n                results.append({\n                    \"file_name\": self.metadata[i][\"file_name\"],\n                    \"file_contents\": self.metadata[i][\"file_contents\"]\n                })\n        return results\n\n  \n    def _save_index(self):\n        faiss.write_index(self.index, os.path.join(self.store_dir, \"rag_index.faiss\"))\n\n    def _save_metadata(self):\n        with open(os.path.join(self.store_dir, \"rag_metadata.json\"), \"w\", encoding=\"utf-8\") as f:\n            json.dump(self.metadata, f, ensure_ascii=False, indent=2)\n\n    def _load_if_exists(self):\n        idx_path = os.path.join(self.store_dir, \"rag_index.faiss\")\n        meta_path = os.path.join(self.store_dir, \"rag_metadata.json\")\n\n        if os.path.exists(idx_path) and os.path.exists(meta_path):\n            try:\n                self.index = faiss.read_index(idx_path)\n                with open(meta_path, \"r\", encoding=\"utf-8\") as f:\n                    self.metadata = json.load(f)\n                print(f\"[LOAD] {len(self.metadata)} are loaded.\")\n            except Exception as e:\n                print(f\"[WARN] RAG fail: {e}\")\n"
  },
  {
    "file_name": "requirements.txt",
    "file_contents": "faiss-cpu\nsentence-transformers\nopenai\npymupdf\nnumpy\nfastmcp\nPyGithub\n"
  },
  {
    "file_name": "server.py",
    "file_contents": "# server.py\nimport os\nimport json\nfrom dotenv import load_dotenv\nfrom fastmcp import FastMCP\nfrom rag import FileRAG\nfrom github import Github\nimport subprocess\n\n\nload_dotenv()\n\nmcp = FastMCP(\n    name=\"MCP-RAG-Agent\",\n    instructions=\"Custom MCP server.\"\n)\n\nrag = FileRAG()\n\n\n@mcp.tool()\ndef list_directory(path: str) -> dict:\n    if not os.path.isdir(path):\n        return {\"error\": f\"'{path}' is not valid dir.\"}\n    files = os.listdir(path)\n    return {\"files\": files}\n\n@mcp.tool()\ndef read_file(path: str) -> dict:\n    if not os.path.exists(path):\n        return {\"error\": f\"file '{path}' can't find.\"}\n    with open(path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n        content = f.read()\n    return {\"content\": content}\n\n@mcp.tool()\ndef build_index_from_directory(path: str) -> dict:\n    if not os.path.isdir(path):\n        return {\"error\": f\"'{path}' is not a valid directory.\"}\n\n    file_dict = {}\n    total_files = 0\n\n    for fname in os.listdir(path):\n        full_path = os.path.join(path, fname)\n        if not os.path.isfile(full_path):\n            continue\n\n        try:\n            ext = fname.lower().split(\".\")[-1]\n            text = \"\"\n\n            if ext == \"pdf\":\n                text = rag.pdf_to_text(full_path)\n            elif ext in [\"py\", \"md\", \"txt\", \"json\", \"yaml\", \"yml\"]:\n                with open(full_path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n                    text = f.read()\n            else:\n                continue \n\n            if text.strip():\n                file_dict[fname] = text\n                total_files += 1\n            else:\n                print(f\"[SKIP] {fname}: empty text\")\n\n        except Exception as e:\n            print(f\"[WARN] {fname} failed: {e}\")\n            continue\n\n    if not file_dict:\n        return {\"error\": \"No valid files found for indexing.\"}\n\n    rag.build_index(file_dict)\n    return {\"message\": f\"{total_files} files indexed successfully.\"}\n\n\n@mcp.tool()\ndef build_index_from_github(url: str) -> dict:\n    try:\n        if \"github.com\" not in url:\n            return {\"error\": \"is not valid GitHub URL.\"}\n\n        repo_path = url.split(\"github.com/\")[-1].split(\"/tree\")[0].strip(\"/\")\n        g = Github(os.getenv(\"GITHUB_TOKEN\"))\n        repo = g.get_repo(repo_path)\n\n        file_dict = {}\n        stack = repo.get_contents(\"\")\n\n        while stack:\n            file_content = stack.pop(0)\n            if file_content.type == \"dir\":\n                stack.extend(repo.get_contents(file_content.path))\n            elif file_content.type == \"file\":\n                fname = file_content.path\n                try:\n                    if fname.lower().endswith((\".py\", \".c\", \".md\", \".txt\", \".json\", \".yaml\", \".yml\")):\n                        text = file_content.decoded_content.decode(\"utf-8\", errors=\"ignore\")\n                        if text.strip():\n                            file_dict[fname] = text\n                except Exception as e:\n                    print(f\"[WARN] {fname} fail: {e}\")\n                    continue\n\n        if not file_dict:\n            return {\"error\": f\"'{repo_path}' can't find.\"}\n\n        rag.build_index(file_dict)\n        return {\"message\": f\"GitHub: '{repo_path}', {len(file_dict)} indexing complete.\"}\n\n    except Exception as e:\n        return {\"error\": f\"GitHub indexing fail: {str(e)}\"}\n\n\n@mcp.tool()\ndef search_in_index(query: str, top_k: int = 3) -> dict:\n    try:\n        results = rag.search(query, top_k=top_k)\n        return {\"results\": results}\n    except Exception as e:\n        return {\"error\": str(e)}\n\n\n@mcp.tool()\ndef write_file(path: str, content: str) -> dict:\n    try:\n        folder = os.path.dirname(path)\n        if not os.path.exists(folder):\n            os.makedirs(folder, exist_ok=True)\n\n        with open(path, \"w\", encoding=\"utf-8\") as f:\n            f.write(content)\n        return {\"message\": f\"file save: {path}\"}\n    except Exception as e:\n        return {\"error\": str(e)}\n\n\n@mcp.tool()\ndef git_commit_and_push(repo_path: str, commit_message: str, remote_url: str) -> dict:\n    try:\n        if not os.path.isdir(repo_path):\n            return {\"error\": f\"{repo_path} is not a valid directory.\"}\n\n        username = os.getenv(\"GITHUB_USERNAME\")\n        token = os.getenv(\"GITHUB_TOKEN\")\n        if not username or not token:\n            return {\"error\": \"GitHub Authentication info missing.\"}\n\n        auth_url = remote_url.replace(\n            \"https://\",\n            f\"https://{username}:{token}@\"\n        )\n\n        subprocess.run([\"git\", \"-C\", repo_path, \"add\", \".\"], check=True)\n        subprocess.run([\"git\", \"-C\", repo_path, \"commit\", \"-m\", commit_message], check=False)\n        subprocess.run([\"git\", \"-C\", repo_path, \"push\", auth_url, \"--force\"], check=True)\n\n        return {\"message\": f\"✅ '{commit_message}' pushed to {remote_url}!\"}\n\n    except subprocess.CalledProcessError as e:\n        return {\"error\": f\"Git command error: {e}\"}\n    except Exception as e:\n        return {\"error\": str(e)}\n\n\nif __name__ == \"__main__\":\n    mcp.run(\n        transport=\"streamable-http\",\n        host=\"0.0.0.0\",\n        port=8000,\n        path=\"/mcp\",\n    )\n"
  },
  {
    "file_name": "README.md",
    "file_contents": "#\u0000 \u0000*\u0000*\u0000C\u0000u\u0000s\u0000t\u0000o\u0000m\u0000 \u0000R\u0000A\u0000G\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000*\u0000*\u0000M\u0000C\u0000P\u0000 \u0000S\u0000e\u0000r\u0000v\u0000e\u0000r\u0000 \u0000I\u0000n\u0000s\u0000t\u0000a\u0000l\u0000l\u0000a\u0000t\u0000i\u0000o\u0000n\u0000 \u0000a\u0000n\u0000d\u0000 \u0000E\u0000x\u0000e\u0000c\u0000u\u0000t\u0000i\u0000o\u0000n\u0000 \u0000G\u0000u\u0000i\u0000d\u0000e\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000*\u0000*\u0000R\u0000e\u0000q\u0000u\u0000i\u0000r\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000*\u0000 \u0000P\u0000y\u0000t\u0000h\u0000o\u0000n\u0000 \u00003\u0000.\u00007\u0000 \u0000o\u0000r\u0000 \u0000h\u0000i\u0000g\u0000h\u0000e\u0000r\u0000\n\u0000\n\u0000*\u0000 \u0000W\u0000i\u0000n\u0000d\u0000o\u0000w\u0000s\u0000 \u0000P\u0000o\u0000w\u0000e\u0000r\u0000S\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000*\u0000*\u0000S\u0000e\u0000t\u0000u\u0000p\u0000 \u0000I\u0000n\u0000s\u0000t\u0000r\u0000u\u0000c\u0000t\u0000i\u0000o\u0000n\u0000s\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000*\u0000*\u00001\u0000.\u0000 \u0000V\u0000i\u0000r\u0000t\u0000u\u0000a\u0000l\u0000 \u0000E\u0000n\u0000v\u0000i\u0000r\u0000o\u0000n\u0000m\u0000e\u0000n\u0000t\u0000 \u0000S\u0000e\u0000t\u0000u\u0000p\u0000 \u0000(\u0000W\u0000i\u0000n\u0000d\u0000o\u0000w\u0000s\u0000)\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000#\u0000 \u0000A\u0000l\u0000l\u0000o\u0000w\u0000 \u0000P\u0000o\u0000w\u0000e\u0000r\u0000S\u0000h\u0000e\u0000l\u0000l\u0000 \u0000S\u0000c\u0000r\u0000i\u0000p\u0000t\u0000 \u0000E\u0000x\u0000e\u0000c\u0000u\u0000t\u0000i\u0000o\u0000n\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000S\u0000e\u0000t\u0000-\u0000E\u0000x\u0000e\u0000c\u0000u\u0000t\u0000i\u0000o\u0000n\u0000P\u0000o\u0000l\u0000i\u0000c\u0000y\u0000 \u0000-\u0000S\u0000c\u0000o\u0000p\u0000e\u0000 \u0000P\u0000r\u0000o\u0000c\u0000e\u0000s\u0000s\u0000 \u0000-\u0000E\u0000x\u0000e\u0000c\u0000u\u0000t\u0000i\u0000o\u0000n\u0000P\u0000o\u0000l\u0000i\u0000c\u0000y\u0000 \u0000B\u0000y\u0000p\u0000a\u0000s\u0000s\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000#\u0000 \u0000C\u0000r\u0000e\u0000a\u0000t\u0000e\u0000 \u0000V\u0000i\u0000r\u0000t\u0000u\u0000a\u0000l\u0000 \u0000E\u0000n\u0000v\u0000i\u0000r\u0000o\u0000n\u0000m\u0000e\u0000n\u0000t\u0000 \u0000(\u0000r\u0000u\u0000n\u0000 \u0000o\u0000n\u0000l\u0000y\u0000 \u0000o\u0000n\u0000c\u0000e\u0000)\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000p\u0000y\u0000t\u0000h\u0000o\u0000n\u0000 \u0000-\u0000m\u0000 \u0000v\u0000e\u0000n\u0000v\u0000 \u0000.\u0000v\u0000e\u0000n\u0000v\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000#\u0000 \u0000A\u0000c\u0000t\u0000i\u0000v\u0000a\u0000t\u0000e\u0000 \u0000V\u0000i\u0000r\u0000t\u0000u\u0000a\u0000l\u0000 \u0000E\u0000n\u0000v\u0000i\u0000r\u0000o\u0000n\u0000m\u0000e\u0000n\u0000t\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000.\u0000 \u0000.\u0000\\\u0000.\u0000v\u0000e\u0000n\u0000v\u0000\\\u0000S\u0000c\u0000r\u0000i\u0000p\u0000t\u0000s\u0000\\\u0000A\u0000c\u0000t\u0000i\u0000v\u0000a\u0000t\u0000e\u0000.\u0000p\u0000s\u00001\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000*\u0000*\u00002\u0000.\u0000 \u0000I\u0000n\u0000s\u0000t\u0000a\u0000l\u0000l\u0000 \u0000D\u0000e\u0000p\u0000e\u0000n\u0000d\u0000e\u0000n\u0000c\u0000i\u0000e\u0000s\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000p\u0000i\u0000p\u0000 \u0000i\u0000n\u0000s\u0000t\u0000a\u0000l\u0000l\u0000 \u0000-\u0000r\u0000 \u0000r\u0000e\u0000q\u0000u\u0000i\u0000r\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000.\u0000t\u0000x\u0000t\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000*\u0000*\u0000H\u0000o\u0000w\u0000 \u0000t\u0000o\u0000 \u0000R\u0000u\u0000n\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000Y\u0000o\u0000u\u0000 \u0000m\u0000u\u0000s\u0000t\u0000 \u0000r\u0000u\u0000n\u0000 \u0000t\u0000h\u0000e\u0000 \u0000*\u0000*\u0000s\u0000e\u0000r\u0000v\u0000e\u0000r\u0000*\u0000*\u0000 \u0000a\u0000n\u0000d\u0000 \u0000*\u0000*\u0000c\u0000l\u0000i\u0000e\u0000n\u0000t\u0000*\u0000*\u0000 \u0000i\u0000n\u0000 \u0000*\u0000*\u0000s\u0000e\u0000p\u0000a\u0000r\u0000a\u0000t\u0000e\u0000 \u0000t\u0000e\u0000r\u0000m\u0000i\u0000n\u0000a\u0000l\u0000s\u0000*\u0000*\u0000.\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000*\u0000*\u0000T\u0000e\u0000r\u0000m\u0000i\u0000n\u0000a\u0000l\u0000 \u00001\u0000 \u0000\u0014  \u0000R\u0000u\u0000n\u0000 \u0000t\u0000h\u0000e\u0000 \u0000M\u0000C\u0000P\u0000 \u0000S\u0000e\u0000r\u0000v\u0000e\u0000r\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000N\u0000a\u0000v\u0000i\u0000g\u0000a\u0000t\u0000e\u0000 \u0000t\u0000o\u0000 \u0000t\u0000h\u0000e\u0000 \u0000p\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000 \u0000r\u0000o\u0000o\u0000t\u0000 \u0000d\u0000i\u0000r\u0000e\u0000c\u0000t\u0000o\u0000r\u0000y\u0000 \u0000a\u0000n\u0000d\u0000 \u0000s\u0000t\u0000a\u0000r\u0000t\u0000 \u0000t\u0000h\u0000e\u0000 \u0000s\u0000e\u0000r\u0000v\u0000e\u0000r\u0000:\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000p\u0000y\u0000t\u0000h\u0000o\u0000n\u0000 \u0000s\u0000e\u0000r\u0000v\u0000e\u0000r\u0000.\u0000p\u0000y\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000Y\u0000o\u0000u\u0000 \u0000s\u0000h\u0000o\u0000u\u0000l\u0000d\u0000 \u0000s\u0000e\u0000e\u0000 \u0000l\u0000o\u0000g\u0000s\u0000 \u0000s\u0000u\u0000c\u0000h\u0000 \u0000a\u0000s\u0000:\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000I\u0000N\u0000F\u0000O\u0000:\u0000 \u0000 \u0000 \u0000 \u0000 \u0000U\u0000v\u0000i\u0000c\u0000o\u0000r\u0000n\u0000 \u0000r\u0000u\u0000n\u0000n\u0000i\u0000n\u0000g\u0000 \u0000o\u0000n\u0000 \u0000h\u0000t\u0000t\u0000p\u0000:\u0000/\u0000/\u00000\u0000.\u00000\u0000.\u00000\u0000.\u00000\u0000:\u00008\u00000\u00000\u00000\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000K\u0000e\u0000e\u0000p\u0000 \u0000t\u0000h\u0000i\u0000s\u0000 \u0000t\u0000e\u0000r\u0000m\u0000i\u0000n\u0000a\u0000l\u0000 \u0000r\u0000u\u0000n\u0000n\u0000i\u0000n\u0000g\u0000.\u0000\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000*\u0000*\u0000T\u0000e\u0000r\u0000m\u0000i\u0000n\u0000a\u0000l\u0000 \u00002\u0000 \u0000\u0014  \u0000R\u0000u\u0000n\u0000 \u0000t\u0000h\u0000e\u0000 \u0000M\u0000C\u0000P\u0000 \u0000C\u0000l\u0000i\u0000e\u0000n\u0000t\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000O\u0000p\u0000e\u0000n\u0000 \u0000a\u0000 \u0000n\u0000e\u0000w\u0000 \u0000t\u0000e\u0000r\u0000m\u0000i\u0000n\u0000a\u0000l\u0000 \u0000(\u0000w\u0000i\u0000t\u0000h\u0000 \u0000t\u0000h\u0000e\u0000 \u0000v\u0000i\u0000r\u0000t\u0000u\u0000a\u0000l\u0000 \u0000e\u0000n\u0000v\u0000i\u0000r\u0000o\u0000n\u0000m\u0000e\u0000n\u0000t\u0000 \u0000s\u0000t\u0000i\u0000l\u0000l\u0000 \u0000a\u0000c\u0000t\u0000i\u0000v\u0000a\u0000t\u0000e\u0000d\u0000)\u0000 \u0000a\u0000n\u0000d\u0000 \u0000r\u0000u\u0000n\u0000:\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000p\u0000y\u0000t\u0000h\u0000o\u0000n\u0000 \u0000c\u0000l\u0000i\u0000e\u0000n\u0000t\u0000.\u0000p\u0000y\u0000 \u0000\"\u0000<\u0000f\u0000o\u0000l\u0000d\u0000e\u0000r\u0000_\u0000p\u0000a\u0000t\u0000h\u0000>\u0000\"\u0000 \u0000 \u0000 \u0000#\u0000 \u0000F\u0000o\u0000r\u0000 \u0000l\u0000o\u0000c\u0000a\u0000l\u0000 \u0000f\u0000o\u0000l\u0000d\u0000e\u0000r\u0000 \u0000R\u0000A\u0000G\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000o\u0000r\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000p\u0000y\u0000t\u0000h\u0000o\u0000n\u0000 \u0000c\u0000l\u0000i\u0000e\u0000n\u0000t\u0000.\u0000p\u0000y\u0000 \u0000\"\u0000<\u0000g\u0000i\u0000t\u0000_\u0000r\u0000e\u0000p\u0000o\u0000_\u0000u\u0000r\u0000l\u0000>\u0000\"\u0000 \u0000 \u0000#\u0000 \u0000F\u0000o\u0000r\u0000 \u0000G\u0000i\u0000t\u0000H\u0000u\u0000b\u0000 \u0000r\u0000e\u0000p\u0000o\u0000s\u0000i\u0000t\u0000o\u0000r\u0000y\u0000 \u0000R\u0000A\u0000G\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000&\u000f \u0000*\u0000*\u0000I\u0000m\u0000p\u0000o\u0000r\u0000t\u0000a\u0000n\u0000t\u0000 \u0000N\u0000o\u0000t\u0000e\u0000s\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000*\u0000 \u0000R\u0000u\u0000n\u0000 \u0000t\u0000h\u0000e\u0000 \u0000c\u0000o\u0000m\u0000m\u0000a\u0000n\u0000d\u0000 \u0000*\u0000*\u0000f\u0000r\u0000o\u0000m\u0000 \u0000t\u0000h\u0000e\u0000 \u0000s\u0000a\u0000m\u0000e\u0000 \u0000d\u0000i\u0000r\u0000e\u0000c\u0000t\u0000o\u0000r\u0000y\u0000*\u0000*\u0000 \u0000w\u0000h\u0000e\u0000r\u0000e\u0000 \u0000`\u0000c\u0000l\u0000i\u0000e\u0000n\u0000t\u0000.\u0000p\u0000y\u0000`\u0000 \u0000i\u0000s\u0000 \u0000l\u0000o\u0000c\u0000a\u0000t\u0000e\u0000d\u0000.\u0000\n\u0000\n\u0000*\u0000 \u0000F\u0000o\u0000l\u0000d\u0000e\u0000r\u0000 \u0000p\u0000a\u0000t\u0000h\u0000s\u0000 \u0000m\u0000u\u0000s\u0000t\u0000 \u0000b\u0000e\u0000 \u0000*\u0000*\u0000i\u0000n\u0000 \u0000E\u0000n\u0000g\u0000l\u0000i\u0000s\u0000h\u0000*\u0000*\u0000 \u0000(\u0000a\u0000v\u0000o\u0000i\u0000d\u0000 \u0000K\u0000o\u0000r\u0000e\u0000a\u0000n\u0000 \u0000o\u0000r\u0000 \u0000s\u0000p\u0000e\u0000c\u0000i\u0000a\u0000l\u0000 \u0000c\u0000h\u0000a\u0000r\u0000a\u0000c\u0000t\u0000e\u0000r\u0000s\u0000)\u0000.\u0000\n\u0000\n\u0000*\u0000 \u0000T\u0000h\u0000e\u0000 \u0000`\u0000.\u0000v\u0000e\u0000n\u0000v\u0000`\u0000 \u0000e\u0000n\u0000v\u0000i\u0000r\u0000o\u0000n\u0000m\u0000e\u0000n\u0000t\u0000 \u0000m\u0000u\u0000s\u0000t\u0000 \u0000b\u0000e\u0000 \u0000*\u0000*\u0000a\u0000c\u0000t\u0000i\u0000v\u0000a\u0000t\u0000e\u0000d\u0000*\u0000*\u0000 \u0000b\u0000e\u0000f\u0000o\u0000r\u0000e\u0000 \u0000r\u0000u\u0000n\u0000n\u0000i\u0000n\u0000g\u0000.\u0000\n\u0000\n\u0000*\u0000 \u0000M\u0000a\u0000k\u0000e\u0000 \u0000s\u0000u\u0000r\u0000e\u0000 \u0000t\u0000h\u0000e\u0000 \u0000M\u0000C\u0000P\u0000 \u0000s\u0000e\u0000r\u0000v\u0000e\u0000r\u0000 \u0000(\u0000T\u0000e\u0000r\u0000m\u0000i\u0000n\u0000a\u0000l\u0000 \u00001\u0000)\u0000 \u0000i\u0000s\u0000 \u0000a\u0000l\u0000r\u0000e\u0000a\u0000d\u0000y\u0000 \u0000r\u0000u\u0000n\u0000n\u0000i\u0000n\u0000g\u0000.\u0000\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000*\u0000*\u0000P\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000 \u0000D\u0000i\u0000r\u0000e\u0000c\u0000t\u0000o\u0000r\u0000y\u0000 \u0000S\u0000t\u0000r\u0000u\u0000c\u0000t\u0000u\u0000r\u0000e\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000g\u0000s\u0000q\u0000l\u0000\n\u0000\n\u0000p\u0000r\u0000o\u0000j\u0000e\u0000c\u0000t\u0000-\u0000r\u0000o\u0000o\u0000t\u0000/\u0000\n\u0000\n\u0000\u001c%\u0000%\u0000% \u0000c\u0000l\u0000i\u0000e\u0000n\u0000t\u0000.\u0000p\u0000y\u0000\n\u0000\n\u0000\u001c%\u0000%\u0000% \u0000s\u0000e\u0000r\u0000v\u0000e\u0000r\u0000.\u0000p\u0000y\u0000\n\u0000\n\u0000\u001c%\u0000%\u0000% \u0000r\u0000a\u0000g\u0000.\u0000p\u0000y\u0000\n\u0000\n\u0000\u001c%\u0000%\u0000% \u0000r\u0000e\u0000q\u0000u\u0000i\u0000r\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000.\u0000t\u0000x\u0000t\u0000\n\u0000\n\u0000\u001c%\u0000%\u0000% \u0000.\u0000v\u0000e\u0000n\u0000v\u0000/\u0000\n\u0000\n\u0000\u0014%\u0000%\u0000% \u0000R\u0000E\u0000A\u0000D\u0000M\u0000E\u0000.\u0000m\u0000d\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000*\u0000*\u0000T\u0000r\u0000o\u0000u\u0000b\u0000l\u0000e\u0000s\u0000h\u0000o\u0000o\u0000t\u0000i\u0000n\u0000g\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000*\u0000*\u0000D\u0000e\u0000a\u0000c\u0000t\u0000i\u0000v\u0000a\u0000t\u0000e\u0000 \u0000V\u0000i\u0000r\u0000t\u0000u\u0000a\u0000l\u0000 \u0000E\u0000n\u0000v\u0000i\u0000r\u0000o\u0000n\u0000m\u0000e\u0000n\u0000t\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000W\u0000h\u0000e\u0000n\u0000 \u0000y\u0000o\u0000u\u0000\u0019 r\u0000e\u0000 \u0000d\u0000o\u0000n\u0000e\u0000:\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000d\u0000e\u0000a\u0000c\u0000t\u0000i\u0000v\u0000a\u0000t\u0000e\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000*\u0000*\u0000E\u0000x\u0000e\u0000c\u0000u\u0000t\u0000i\u0000o\u0000n\u0000 \u0000P\u0000o\u0000l\u0000i\u0000c\u0000y\u0000 \u0000E\u0000r\u0000r\u0000o\u0000r\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000R\u0000u\u0000n\u0000 \u0000P\u0000o\u0000w\u0000e\u0000r\u0000S\u0000h\u0000e\u0000l\u0000l\u0000 \u0000a\u0000s\u0000 \u0000A\u0000d\u0000m\u0000i\u0000n\u0000i\u0000s\u0000t\u0000r\u0000a\u0000t\u0000o\u0000r\u0000 \u0000o\u0000r\u0000 \u0000c\u0000h\u0000e\u0000c\u0000k\u0000 \u0000t\u0000h\u0000e\u0000 \u0000c\u0000u\u0000r\u0000r\u0000e\u0000n\u0000t\u0000 \u0000p\u0000o\u0000l\u0000i\u0000c\u0000y\u0000:\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000G\u0000e\u0000t\u0000-\u0000E\u0000x\u0000e\u0000c\u0000u\u0000t\u0000i\u0000o\u0000n\u0000P\u0000o\u0000l\u0000i\u0000c\u0000y\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000#\u0000 \u0000*\u0000*\u0000P\u0000y\u0000t\u0000h\u0000o\u0000n\u0000 \u0000P\u0000a\u0000t\u0000h\u0000 \u0000I\u0000s\u0000s\u0000u\u0000e\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000E\u0000n\u0000s\u0000u\u0000r\u0000e\u0000 \u0000P\u0000y\u0000t\u0000h\u0000o\u0000n\u0000 \u0000i\u0000s\u0000 \u0000a\u0000d\u0000d\u0000e\u0000d\u0000 \u0000t\u0000o\u0000 \u0000t\u0000h\u0000e\u0000 \u0000s\u0000y\u0000s\u0000t\u0000e\u0000m\u0000 \u0000P\u0000A\u0000T\u0000H\u0000,\u0000 \u0000o\u0000r\u0000 \u0000u\u0000s\u0000e\u0000 \u0000t\u0000h\u0000e\u0000 \u0000f\u0000u\u0000l\u0000l\u0000 \u0000p\u0000a\u0000t\u0000h\u0000:\u0000\n\u0000\n\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000p\u0000o\u0000w\u0000e\u0000r\u0000s\u0000h\u0000e\u0000l\u0000l\u0000\n\u0000\n\u0000C\u0000:\u0000\\\u0000P\u0000y\u0000t\u0000h\u0000o\u0000n\u00003\u00009\u0000\\\u0000p\u0000y\u0000t\u0000h\u0000o\u0000n\u0000.\u0000e\u0000x\u0000e\u0000 \u0000s\u0000e\u0000r\u0000v\u0000e\u0000r\u0000.\u0000p\u0000y\u0000\n\u0000\n\u0000`\u0000`\u0000`\u0000\n\u0000\n\u0000\n\u0000\n\u0000-\u0000-\u0000-\u0000\n\u0000\n\u0000\n\u0000\n\u0000#\u0000#\u0000 \u0000*\u0000*\u0000A\u0000d\u0000d\u0000i\u0000t\u0000i\u0000o\u0000n\u0000a\u0000l\u0000 \u0000N\u0000o\u0000t\u0000e\u0000s\u0000*\u0000*\u0000\n\u0000\n\u0000\n\u0000\n\u0000*\u0000 \u0000A\u0000l\u0000w\u0000a\u0000y\u0000s\u0000 \u0000e\u0000x\u0000e\u0000c\u0000u\u0000t\u0000e\u0000 \u0000c\u0000o\u0000m\u0000m\u0000a\u0000n\u0000d\u0000s\u0000 \u0000*\u0000*\u0000f\u0000r\u0000o\u0000m\u0000 \u0000t\u0000h\u0000e\u0000 \u0000f\u0000o\u0000l\u0000d\u0000e\u0000r\u0000 \u0000w\u0000h\u0000e\u0000r\u0000e\u0000 \u0000`\u0000c\u0000l\u0000i\u0000e\u0000n\u0000t\u0000.\u0000p\u0000y\u0000`\u0000 \u0000i\u0000s\u0000 \u0000l\u0000o\u0000c\u0000a\u0000t\u0000e\u0000d\u0000*\u0000*\u0000.\u0000\n\u0000\n\u0000*\u0000 \u0000R\u0000e\u0000p\u0000l\u0000a\u0000c\u0000e\u0000 \u0000t\u0000h\u0000e\u0000 \u0000d\u0000e\u0000f\u0000a\u0000u\u0000l\u0000t\u0000 \u0000A\u0000P\u0000I\u0000 \u0000k\u0000e\u0000y\u0000 \u0000i\u0000n\u0000 \u0000`\u0000.\u0000e\u0000n\u0000v\u0000`\u0000 \u0000w\u0000i\u0000t\u0000h\u0000 \u0000y\u0000o\u0000u\u0000r\u0000 \u0000o\u0000w\u0000n\u0000 \u0000b\u0000e\u0000f\u0000o\u0000r\u0000e\u0000 \u0000r\u0000u\u0000n\u0000n\u0000i\u0000n\u0000g\u0000.\u0000\n\u0000\n\u0000*\u0000 \u0000U\u0000s\u0000e\u0000 \u0000*\u0000*\u0000E\u0000n\u0000g\u0000l\u0000i\u0000s\u0000h\u0000-\u0000o\u0000n\u0000l\u0000y\u0000 \u0000f\u0000o\u0000l\u0000d\u0000e\u0000r\u0000 \u0000n\u0000a\u0000m\u0000e\u0000s\u0000*\u0000*\u0000 \u0000t\u0000o\u0000 \u0000a\u0000v\u0000o\u0000i\u0000d\u0000 \u0000e\u0000n\u0000c\u0000o\u0000d\u0000i\u0000n\u0000g\u0000 \u0000i\u0000s\u0000s\u0000u\u0000e\u0000s\u0000.\u0000\n\u0000\n\u0000*\u0000 \u0000T\u0000h\u0000e\u0000 \u0000`\u0000r\u0000e\u0000q\u0000u\u0000i\u0000r\u0000e\u0000m\u0000e\u0000n\u0000t\u0000s\u0000.\u0000t\u0000x\u0000t\u0000`\u0000 \u0000f\u0000i\u0000l\u0000e\u0000 \u0000m\u0000u\u0000s\u0000t\u0000 \u0000b\u0000e\u0000 \u0000i\u0000n\u0000 \u0000t\u0000h\u0000e\u0000 \u0000s\u0000a\u0000m\u0000e\u0000 \u0000d\u0000i\u0000r\u0000e\u0000c\u0000t\u0000o\u0000r\u0000y\u0000.\u0000\n\u0000\n\u0000"
  },
  {
    "file_name": "client.py",
    "file_contents": "import os, json, uuid, requests\nfrom dotenv import load_dotenv\nfrom openai import OpenAI\n\nload_dotenv()\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\nMCP_URL = \"http://127.0.0.1:8000/mcp\"\nsession_id: str | None = None \n\n\ndef init_mcp_session():\n    global session_id\n    if session_id is not None:\n        return session_id  \n\n    payload = {\n        \"jsonrpc\": \"2.0\",\n        \"id\": str(uuid.uuid4()),\n        \"method\": \"initialize\",\n        \"params\": {\n            \"protocolVersion\": 1,\n            \"capabilities\": {\"tools\": True},\n            \"clientInfo\": {\"name\": \"local-client\", \"version\": \"0.1\"}\n        }\n    }\n    headers = {\n        \"Accept\": \"application/json, text/event-stream\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    r = requests.post(MCP_URL, json=payload, headers=headers, timeout=10)\n    r.raise_for_status()\n\n    sid = r.headers.get(\"Mcp-Session-Id\")\n    if not sid:\n        raise RuntimeError(\"Session ID issue.\")\n    session_id = sid\n    print(f\"✅ MCP Sesseion Build!: {session_id}\")\n\n    notify = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"notifications/initialized\",\n        \"params\": {}\n    }\n    headers[\"Mcp-Session-Id\"] = sid\n    requests.post(MCP_URL, json=notify, headers=headers, timeout=5)\n    return sid\n\n\ndef call_mcp_tool(name: str, args: dict):\n    global session_id\n    if session_id is None:\n        init_mcp_session()\n\n    payload = {\n        \"jsonrpc\": \"2.0\",\n        \"id\": str(uuid.uuid4()),\n        \"method\": \"tools/call\",\n        \"params\": {\"name\": name, \"arguments\": args}\n    }\n\n    print(\"\\n=== [JSON-RPC Request] ===\")\n    print(json.dumps(payload, indent=2, ensure_ascii=False)) \n    headers = {\n        \"Accept\": \"application/json, text/event-stream\",\n        \"Content-Type\": \"application/json\",\n        \"Mcp-Session-Id\": session_id\n    }\n\n    with requests.post(MCP_URL, json=payload, headers=headers, stream=True, timeout=100) as r:\n        if r.status_code != 200:\n            raise RuntimeError(f\"ERROR: {r.status_code} {r.text}\")\n\n        data_lines = []\n        for line in r.iter_lines(decode_unicode=True):\n            if line.startswith(\"data:\"):\n                data_lines.append(line[5:].strip())\n\n        if not data_lines:\n            return {\"error\": \"response is empty.\"}\n\n        raw = \"\\n\".join(data_lines)\n        try:\n            outer = json.loads(raw)\n        except json.JSONDecodeError:\n            return {\"raw\": raw}\n\n        if isinstance(outer, dict) and \"result\" in outer:\n            content = outer[\"result\"].get(\"content\", [])\n            if content and \"text\" in content[0]:\n                raw_text = content[0][\"text\"]\n                try:\n                    data = json.loads(raw_text)\n                    if isinstance(data, str):\n                        data = json.loads(data)\n                    return data\n                except json.JSONDecodeError:\n                    return {\"raw\": raw_text}\n\ndef chat_with_mcp():\n    init_mcp_session()\n\n    messages = [\n        {\n            \"role\": \"system\",\n            \"content\": \"너는 로컬 RAG MCP 서버의 도구를 활용할 수 있는 AI야. 사용자가 파일 검색, 파일 작성 등의 작업을 요청하면 MCP 도구를 호출해야 해.\"\n        }\n    ]\n\n    tools = [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"list_directory\",\n                \"description\": \"로컬 폴더의 파일 목록을 가져옵니다.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\"path\": {\"type\": \"string\"}},\n                    \"required\": [\"path\"]\n                }\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"build_index_from_directory\",\n                \"description\": \"폴더 내 파일을 인덱싱합니다.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\"path\": {\"type\": \"string\"}},\n                    \"required\": [\"path\"]\n                }\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"build_index_from_github\",\n                \"description\": \"깃허브 URL을 RAG 인덱스로 구축합니다.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\"url\": {\"type\": \"string\"}},\n                    \"required\": [\"url\"]\n                }\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"search_in_index\",\n                \"description\": \"RAG 인덱스에서 쿼리를 검색합니다.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\"query\": {\"type\": \"string\"}},\n                    \"required\": [\"query\"]\n                }\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"git_commit_and_push\",\n                \"description\": \"로컬 폴더의 변경사항을 커밋하고 지정한 원격 저장소 URL로 푸시합니다.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"repo_path\": {\n                            \"type\": \"string\",\n                            \"description\": \"로컬 Git 저장소의 경로\"\n                        },\n                        \"commit_message\": {\n                            \"type\": \"string\",\n                            \"description\": \"커밋 메시지\"\n                        },\n                        \"remote_url\": {\n                            \"type\": \"string\",\n                            \"description\": \"원격 저장소의 HTTPS 또는 SSH URL (예: https://github.com/user/repo.git)\"\n                        }\n                    },\n                    \"required\": [\"repo_path\", \"commit_message\", \"remote_url\"]\n                }\n            }\n        },\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"write_file\",\n                \"description\": \"지정된 경로에 파일을 작성합니다.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"path\": {\"type\": \"string\"},\n                        \"content\": {\"type\": \"string\"}\n                    },\n                    \"required\": [\"path\", \"content\"]\n                }\n            }\n        }\n    ]\n\n    print(\"Session start (escape: quit, exit)\\n\")\n    while True:\n        user_input = input(\"💬 Prompt: \")\n        if user_input.strip().lower() in {\"exit\", \"quit\"}:\n            print(\"MCP session finish!\")\n            break\n\n        messages.append({\"role\": \"user\", \"content\": user_input})\n\n        chat_kwargs = {\n            \"model\": \"gpt-4o-mini\",\n            \"messages\": messages,\n            \"tool_choice\": \"auto\",\n            \"tools\": tools\n        }\n\n        res = client.chat.completions.create(**chat_kwargs)\n        msg = res.choices[0].message\n\n        if not msg.tool_calls:\n            print(\"\", msg.content)\n            messages.append({\"role\": \"assistant\", \"content\": msg.content})\n            continue\n\n        for call in msg.tool_calls:\n            fn_name = call.function.name\n            fn_args = json.loads(call.function.arguments)\n            print(f\"[MCP request] {fn_name}({fn_args})\")\n            tool_output = call_mcp_tool(fn_name, fn_args)\n            # print(f\"[MCP response] {tool_output}\")\n            print(f\"[MCP response] success\")\n\n            messages += [\n                {\"role\": \"assistant\", \"content\": None, \"tool_calls\": [call.model_dump()]},\n                {\"role\": \"tool\", \"tool_call_id\": call.id, \"name\": fn_name,\n                 \"content\": json.dumps(tool_output, ensure_ascii=False)}\n            ]\n        \n        res = client.chat.completions.create(\n            model=\"gpt-4o-mini\",\n            messages=messages\n        )\n        final_msg = res.choices[0].message\n        print(\"🧠 GPT:\", final_msg.content)\n        messages.append({\"role\": \"assistant\", \"content\": final_msg.content})\n\n\nif __name__ == \"__main__\":\n    chat_with_mcp()\n"
  },
  {
    "file_name": "test_prompt.txt",
    "file_contents": "G:\\CustomRAG 폴더의 파일을 RAG DB에 저장해줘.\nG:\\CustomRAG 폴더 내용을 https://github.com/Jang-Jione/custom_RAG에 push 해줘."
  },
  {
    "file_name": "push_check.txt",
    "file_contents": "# CustomRAG\n\nThis repository contains tools and scripts for the Custom RAG application including file indexing, reading, and GitHub integration."
  }
]